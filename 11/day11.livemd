# Day 11

## Part 1

```elixir
input =
  Path.join(__DIR__, "input.txt")
  |> File.stream!()
  |> Stream.map(&String.trim/1)
  |> Stream.chunk_every(7)

:ok
```

```elixir
defmodule Monkey do
  defstruct [:id, :items, :operation, :when_true, :when_false, inspections: 0, factor: 0]

  def parse(lines) do
    for line <- lines, reduce: %__MODULE__{} do
      monkey ->
        parse(monkey, line)
    end
  end

  defp parse(monkey, "Monkey " <> n) do
    {n, ":"} = Integer.parse(n)
    %{monkey | id: n}
  end

  defp parse(monkey, "Starting items: " <> items) do
    items = String.split(items, ",") |> Enum.map(&(&1 |> String.trim() |> String.to_integer()))
    %{monkey | items: Enum.reverse(items)}
  end

  defp parse(monkey, "Operation: new = " <> op) do
    [_, operand1, op, operand2] = Regex.run(~r/(\w+)\s([+*])\s(\w+)/, op)
    operation = {parse_operation(op), parse_operand(operand1), parse_operand(operand2)}
    %{monkey | operation: operation}
  end

  defp parse(monkey, "Test: divisible by " <> number) do
    factor = String.to_integer(number)
    %{monkey | factor: factor}
  end

  defp parse(monkey, "If true: throw to monkey " <> number) do
    %{monkey | when_true: String.to_integer(number)}
  end

  defp parse(monkey, "If false: throw to monkey " <> number) do
    %{monkey | when_false: String.to_integer(number)}
  end

  defp parse(monkey, ""), do: monkey

  defp parse_operand("old"), do: :old
  defp parse_operand(number), do: String.to_integer(number)
  defp parse_operation("*"), do: :multiply
  defp parse_operation("+"), do: :add
end

monkeys =
  for data <- input, into: %{} do
    monkey = Monkey.parse(data)
    {monkey.id, monkey}
  end
```

```elixir
defmodule MonkeyBusiness do
  def rounds(monkeys, n) do
    factor = compute_factor(monkeys)

    for _ <- 1..n, reduce: monkeys do
      monkeys ->
        run_round(monkeys, factor)
    end
  end

  def monkey_business_level(monkeys, n) do
    rounds(monkeys, n)
    |> Map.values()
    |> get_in([Access.all(), Access.key!(:inspections)])
    |> Enum.sort(:desc)
    |> Enum.take(2)
    |> Enum.reduce(&(&1 * &2))
  end

  defp compute_factor(monkeys) do
    monkeys
    |> Map.values()
    |> get_in([Access.all(), Access.key!(:factor)])
    |> Enum.reduce(&(&1 * &2))
  end

  def run_round(monkeys, factor) do
    for n <- 0..(map_size(monkeys) - 1), reduce: monkeys do
      monkeys ->
        monkey = monkeys[n]

        for item <- Enum.reverse(monkey.items), reduce: monkeys do
          monkeys ->
            wl = operate(monkey.operation, item)
            new_wl = rem(wl, factor)

            next_monkey =
              if rem(new_wl, monkey.factor) == 0 do
                monkey.when_true
              else
                monkey.when_false
              end

            monkeys
            |> get_and_update_in([next_monkey, Access.key!(:items)], &{&1, [new_wl | &1]})
            |> elem(1)
        end
        |> put_in([monkey.id, Access.key!(:items)], [])
        |> get_and_update_in(
          [monkey.id, Access.key!(:inspections)],
          &{&1, &1 + Enum.count(monkey.items)}
        )
        |> elem(1)
    end
  end

  defp operate({:multiply, op1, op2}, value), do: operand(op1, value) * operand(op2, value)
  defp operate({:add, op1, op2}, value), do: operand(op1, value) + operand(op2, value)
  defp operand(:old, old), do: old
  defp operand(number, _) when is_integer(number), do: number
end

MonkeyBusiness.monkey_business_level(monkeys, 10000)
```
